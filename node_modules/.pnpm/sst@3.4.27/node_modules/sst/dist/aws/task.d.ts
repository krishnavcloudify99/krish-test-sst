import { AwsOptions } from "./client.js";
/**
 * The `task` client SDK is available through the following.
 *
 * @example
 * ```js title="src/app.ts"
 * import { task } from "sst/aws/task";
 * ```
 */
export declare namespace task {
    /**
     * The link data for the task.
     *
     * @example
     * For example, let's say you have a task.
     *
     * ```js title="sst.config.ts"
     * cluster.addTask("MyTask");
     * ```
     *
     * `Resource.MyTask` will have all the link data.
     *
     * ```js title="src/app.ts"
     * import { Resource } from "sst";
     *
     * console.log(Resource.MyTask);
     * ```
     */
    export interface Resource {
        /**
         * The ARN of the cluster.
         */
        cluster: string;
        /**
         * The ARN of the task definition.
         */
        taskDefinition: string;
        /**
         * The subnets to use for the task.
         */
        subnets: string[];
        /**
         * The security groups to use for the task.
         */
        securityGroups: string[];
        /**
         * Whether to assign a public IP address to the task.
         */
        assignPublicIp: boolean;
        /**
         * The names of the containers in the task.
         */
        containers: string[];
    }
    export interface Options {
        /**
         * Configure the AWS client.
         */
        aws?: AwsOptions;
    }
    interface Task {
        /**
         * The ARN of the task.
         */
        arn: string;
        /**
         * The status of the task.
         */
        status: string;
    }
    export interface DescribeResponse extends Task {
        /**
         * The raw response from the AWS ECS DescribeTasks API.
         * @see [@aws-sdk/client-ecs.DescribeTasksResponse](https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/Package/-aws-sdk-client-ecs/Interface/DescribeTasksResponse/)
         */
        response: any;
    }
    export interface RunResponse extends Task {
        /**
         * The raw response from the AWS ECS RunTask API.
         * @see [@aws-sdk/client-ecs.RunTaskResponse](https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/Package/-aws-sdk-client-ecs/Interface/RunTaskResponse/)
         */
        response: any;
    }
    export interface StopResponse extends Task {
        /**
         * The raw response from the AWS ECS StopTask API.
         * @see [@aws-sdk/client-ecs.StopTaskResponse](https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/Package/-aws-sdk-client-ecs/Interface/StopTaskResponse/)
         */
        response: any;
    }
    /**
     * Gets the details of a task. Tasks stopped longer than 1 hour are not returned.
     * @example
     * For example, let's say you have started task.
     *
     * ```js title="src/app.ts"
     * import { Resource } from "sst";
     * import { task } from "sst/aws/task";
     *
     * const runRet = await task.run(Resource.MyTask);
     * const taskArn = runRet.tasks[0].taskArn;
     * ```
     *
     * You can get the details of the task with the following.
     *
     * ```js title="src/app.ts"
     * const describeRet = await task.describe(Resource.MyTask, taskArn);
     * ```
     */
    export function describe(resource: Resource, task: string, options?: Options): Promise<DescribeResponse>;
    /**
     * Runs a task.
     *
     * @example
     *
     * For example, let's say you have a task.
     *
     * ```js title="sst.config.ts"
     * cluster.addTask("MyTask");
     * ```
     *
     * You can run it in your application with the following.
     *
     * ```js title="src/app.ts"
     * import { Resource } from "sst";
     * import { task } from "sst/aws/task";
     *
     * const runRet = await task.run(Resource.MyTask);
     * const taskArn = runRet.tasks[0].taskArn;
     * ```
     *
     * `taskArn` is the ARN of the task. You can pass it to the `describe` function to get
     * the status of the task; or to the `stop` function to stop the task.
     *
     * You can also pass in environment variables to the task.
     *
     * ```js title="src/app.ts"
     * await task.run(Resource.MyTask, {
     *   MY_ENV_VAR: "my-value",
     * });
     * ```
     */
    export function run(resource: Resource, environment?: Record<string, string>, options?: {
        aws?: AwsOptions;
    }): Promise<RunResponse>;
    /**
     * Stops a task.
     *
     * @example
     *
     * For example, let's say you have started a task.
     *
     * ```js title="src/app.ts"
     * import { Resource } from "sst";
     * import { task } from "sst/aws/task";
     *
     * const runRet = await task.run(Resource.MyTask);
     * const taskArn = runRet.tasks[0].taskArn;
     * ```
     *
     * You can stop the task with the following.
     *
     * ```js title="src/app.ts"
     * const stopRet = await task.stop(Resource.MyTask, taskArn);
     *
     * // check if the task is stopped
     * console.log(stopRet.task?.lastStatus);
     * ```
     */
    export function stop(resource: Resource, task: string, options?: Options): Promise<StopResponse>;
    export class DescribeError extends Error {
        readonly response: Response;
        constructor(response: Response);
    }
    export class RunError extends Error {
        readonly response: Response;
        constructor(response: Response);
    }
    export class StopError extends Error {
        readonly response: Response;
        constructor(response: Response);
    }
    export {};
}
