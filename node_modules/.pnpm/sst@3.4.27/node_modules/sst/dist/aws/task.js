import { client } from "./client.js";
/**
 * The `task` client SDK is available through the following.
 *
 * @example
 * ```js title="src/app.ts"
 * import { task } from "sst/aws/task";
 * ```
 */
export var task;
(function (task_1) {
    function url(region, options) {
        if (options?.region)
            region = options.region;
        return `https://ecs.${region}.amazonaws.com/`;
    }
    /**
     * Gets the details of a task. Tasks stopped longer than 1 hour are not returned.
     * @example
     * For example, let's say you have started task.
     *
     * ```js title="src/app.ts"
     * import { Resource } from "sst";
     * import { task } from "sst/aws/task";
     *
     * const runRet = await task.run(Resource.MyTask);
     * const taskArn = runRet.tasks[0].taskArn;
     * ```
     *
     * You can get the details of the task with the following.
     *
     * ```js title="src/app.ts"
     * const describeRet = await task.describe(Resource.MyTask, taskArn);
     * ```
     */
    async function describe(resource, task, options) {
        const c = await client();
        const u = url(c.region, options?.aws);
        const res = await c.fetch(u, {
            method: "POST",
            aws: options?.aws,
            headers: {
                "X-Amz-Target": "AmazonEC2ContainerServiceV20141113.DescribeTasks",
                "Content-Type": "application/x-amz-json-1.1",
            },
            body: JSON.stringify({
                cluster: resource.cluster,
                tasks: [task],
            }),
        });
        if (!res.ok)
            throw new DescribeError(res);
        const data = (await res.json());
        if (!data.tasks?.length)
            throw new DescribeError(res);
        return {
            arn: data.tasks[0].taskArn,
            status: data.tasks[0].lastStatus,
            response: data,
        };
    }
    task_1.describe = describe;
    /**
     * Runs a task.
     *
     * @example
     *
     * For example, let's say you have a task.
     *
     * ```js title="sst.config.ts"
     * cluster.addTask("MyTask");
     * ```
     *
     * You can run it in your application with the following.
     *
     * ```js title="src/app.ts"
     * import { Resource } from "sst";
     * import { task } from "sst/aws/task";
     *
     * const runRet = await task.run(Resource.MyTask);
     * const taskArn = runRet.tasks[0].taskArn;
     * ```
     *
     * `taskArn` is the ARN of the task. You can pass it to the `describe` function to get
     * the status of the task; or to the `stop` function to stop the task.
     *
     * You can also pass in environment variables to the task.
     *
     * ```js title="src/app.ts"
     * await task.run(Resource.MyTask, {
     *   MY_ENV_VAR: "my-value",
     * });
     * ```
     */
    async function run(resource, environment, options) {
        const c = await client();
        const u = url(c.region, options?.aws);
        const res = await c.fetch(u, {
            method: "POST",
            aws: options?.aws,
            headers: {
                "X-Amz-Target": "AmazonEC2ContainerServiceV20141113.RunTask",
                "Content-Type": "application/x-amz-json-1.1",
            },
            body: JSON.stringify({
                cluster: resource.cluster,
                launchType: "FARGATE",
                taskDefinition: resource.taskDefinition,
                networkConfiguration: {
                    awsvpcConfiguration: {
                        subnets: resource.subnets,
                        securityGroups: resource.securityGroups,
                        assignPublicIp: resource.assignPublicIp ? "ENABLED" : "DISABLED",
                    },
                },
                overrides: {
                    containerOverrides: resource.containers.map((name) => ({
                        name,
                        environment: Object.entries(environment ?? {}).map(([key, value]) => ({
                            name: key,
                            value,
                        })),
                    })),
                },
            }),
        });
        if (!res.ok)
            throw new RunError(res);
        const data = (await res.json());
        if (!data.tasks?.length)
            throw new RunError(res);
        return {
            arn: data.tasks[0].taskArn,
            status: data.tasks[0].lastStatus,
            response: data,
        };
    }
    task_1.run = run;
    /**
     * Stops a task.
     *
     * @example
     *
     * For example, let's say you have started a task.
     *
     * ```js title="src/app.ts"
     * import { Resource } from "sst";
     * import { task } from "sst/aws/task";
     *
     * const runRet = await task.run(Resource.MyTask);
     * const taskArn = runRet.tasks[0].taskArn;
     * ```
     *
     * You can stop the task with the following.
     *
     * ```js title="src/app.ts"
     * const stopRet = await task.stop(Resource.MyTask, taskArn);
     *
     * // check if the task is stopped
     * console.log(stopRet.task?.lastStatus);
     * ```
     */
    async function stop(resource, task, options) {
        const c = await client();
        const u = url(c.region, options?.aws);
        const res = await c.fetch(u, {
            method: "POST",
            aws: options?.aws,
            headers: {
                "X-Amz-Target": "AmazonEC2ContainerServiceV20141113.StopTask",
                "Content-Type": "application/x-amz-json-1.1",
            },
            body: JSON.stringify({
                cluster: resource.cluster,
                task,
            }),
        });
        if (!res.ok)
            throw new StopError(res);
        const data = (await res.json());
        if (!data.task)
            throw new StopError(res);
        return {
            arn: data.task.taskArn,
            status: data.task.lastStatus,
            response: data,
        };
    }
    task_1.stop = stop;
    class DescribeError extends Error {
        response;
        constructor(response) {
            super("Failed to describe task");
            this.response = response;
            console.log(response);
        }
    }
    task_1.DescribeError = DescribeError;
    class RunError extends Error {
        response;
        constructor(response) {
            super("Failed to run task");
            this.response = response;
            console.log(response);
        }
    }
    task_1.RunError = RunError;
    class StopError extends Error {
        response;
        constructor(response) {
            super("Failed to stop task");
            this.response = response;
            console.log(response);
        }
    }
    task_1.StopError = StopError;
})(task || (task = {}));
